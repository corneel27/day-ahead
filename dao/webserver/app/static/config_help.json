{
  "solar": {
    "name": "Solar panel name (e.g., garage, roof)",
    "entity_pv_switch": "Home Assistant entity for enabling/disabling solar panel",
    "tilt": "Tilt angle of solar panels in degrees (0=horizontal, 90=vertical)",
    "orientation": "Orientation in degrees (0=North, 90=East, 180=South, 270=West)",
    "capacity": "Total capacity of solar panels in kWp",
    "yield": "Expected yield factor (historical production data)",
    "strings": "Multiple string configurations for complex solar setups"
  },
  "battery": {
    "name": "Battery name for identification",
    "entity_level": "Home Assistant entity showing current battery state of charge (%)",
    "capacity": "Total battery capacity in kWh",
    "upper_limit": "Maximum allowed charge level (%)",
    "lower_limit": "Minimum allowed discharge level (%)",
    "optimal_lower": "Optimal minimum level for battery health (%)",
    "entity_min_soc": "Home Assistant entity for minimum SOC at optimization end",
    "entity_max_soc": "Home Assistant entity for maximum SOC at optimization end",
    "charge_stages": "Power and efficiency pairs for different charging rates",
    "discharge_stages": "Power and efficiency pairs for different discharging rates",
    "reduced_hours": "Power limitations for specific hours (hour: max_power)",
    "minimum_power": "Minimum power threshold for battery operation (W)",
    "dc_to_bat_efficiency": "Efficiency converting DC to battery (%)",
    "dc_to_bat_power": "Maximum DC to battery power (W)",
    "bat_to_dc_efficiency": "Efficiency converting battery to DC (%)",
    "bat_to_dc_power": "Maximum battery to DC power (W)",
    "cycle_cost": "Cost per battery cycle for degradation calculation (€)",
    "entity_power_feedin": "Home Assistant entity to control grid feed-in power",
    "entity_operating_mode": "Home Assistant entity to set battery operating mode",
    "entity_stop_inverter": "Home Assistant entity to stop inverter at specific time",
    "entity_balance_switch": "Home Assistant entity to enable/disable grid balancing",
    "entity_from_battery": "Home Assistant entity tracking power from battery",
    "entity_from_pv": "Home Assistant entity tracking power from PV",
    "entity_from_ac": "Home Assistant entity tracking power from AC",
    "entity_calculated_soc": "Home Assistant entity for calculated state of charge",
    "solar": "DC-connected solar panels directly to battery"
  },
  "ev": {
    "name": "Electric vehicle name/model",
    "capacity": "Battery capacity in kWh",
    "entity_position": "Device tracker entity for vehicle location",
    "entity_max_amperage": "Home Assistant entity showing maximum charging amperage",
    "charge_three_phase": "Three-phase charging capability (True/False)",
    "charge_stages": "Amperage and efficiency pairs for charging levels",
    "entity_actual_level": "Home Assistant entity showing current battery level (%)",
    "entity_plugged_in": "Binary sensor indicating if vehicle is plugged in",
    "charge_switch": "Switch to enable/disable charging",
    "entity_set_charging_ampere": "Home Assistant entity to set charging current",
    "entity_stop_charging": "Home Assistant entity to stop charging at specific time",
    "scheduler_entity_set_level": "Home Assistant entity to set desired charge level for scheduler",
    "scheduler_level_margin": "Margin around target level for scheduler (%)",
    "scheduler_entity_ready_datetime": "Home Assistant entity for when vehicle should be ready"
  },
  "machine": {
    "name": "Machine name (washing machine, dishwasher, etc.)",
    "programs": "Different programs with power consumption patterns",
    "program_name": "Program name (e.g., eco, normal, intensive)",
    "program_power": "Power consumption pattern in Watts per interval",
    "entity_start_window": "Home Assistant entity for earliest start time",
    "entity_end_window": "Home Assistant entity for latest end time",
    "entity_selected_program": "Input select entity for program selection",
    "entity_calculated_start": "Home Assistant entity showing calculated optimal start time",
    "entity_calculated_end": "Home Assistant entity showing calculated end time"
  },
  "prices": {
    "source": "Source for day-ahead prices (nordpool, entsoe, epex)",
    "entsoe_key": "ENTSO-E API key for fetching electricity prices",
    "regular_high": "High tariff rate in €/kWh",
    "regular_low": "Low tariff rate in €/kWh",
    "switch_to_low": "Hour when switching to low tariff (0-23)",
    "energy_taxes_consumption": "Date-based energy taxes for consumption",
    "energy_taxes_production": "Date-based energy taxes for production",
    "cost_supplier_consumption": "Date-based supplier costs for consumption",
    "cost_supplier_production": "Date-based supplier costs for production",
    "vat_consumption": "Date-based VAT rates for consumption (%)",
    "vat_production": "Date-based VAT rates for production (%)",
    "last_invoice": "Date of last electricity invoice",
    "tax_refund": "Enable tax refund calculation (True/False)"
  },
  "report": {
    "grid_consumption": "Comma-separated sensors tracking grid consumption (kWh)",
    "grid_production": "Comma-separated sensors tracking grid production (kWh)",
    "solar_ac": "Comma-separated sensors for AC solar production (kWh)",
    "solar_dc": "Comma-separated sensors for DC solar production (kWh)",
    "ev_consumption": "Comma-separated sensors for electric vehicle consumption (kWh)",
    "wp_consumption": "Comma-separated sensors for heat pump consumption (kWh)",
    "boiler_consumption": "Comma-separated sensors for boiler consumption (kWh)",
    "battery_consumption": "Comma-separated sensors for battery consumption (kWh)",
    "battery_production": "Comma-separated sensors for battery production (kWh)"
  },
  "general": {
    "strategy": "Optimization strategy (minimize cost or minimize production)",
    "grid_max_power": "Maximum grid power in kW",
    "interval": "Calculation interval (15min or hourly)",
    "use_calc_baseload": "Calculate baseload automatically (True/False)",
    "baseload_calc_periode": "Number of days for baseload calculation",
    "baseload": "24 hourly baseload values in kW",
    "logging_level": "Logging verbosity (debug, info, warning, error)"
  },
  "database": {
    "engine": "Database engine (sqlite, mysql, postgresql)",
    "database": "Database name",
    "db_path": "Path to database file (for SQLite)",
    "host": "Database host address",
    "port": "Database port number",
    "username": "Database username",
    "password": "Database password (use !secret reference)"
  },
  "dashboard": {
    "port": "Port number for web dashboard (default: 5000)"
  },
  "boiler": {
    "boiler_present": "Boiler/water heater present (True/False)",
    "entity_actual_temp": "Sensor for current water temperature",
    "entity_setpoint": "Sensor for temperature setpoint",
    "entity_hysterese": "Sensor for hysteresis setting",
    "cop": "Coefficient of Performance",
    "cooling_rate": "Cooling rate in °C per hour",
    "volume": "Water volume in liters",
    "heating_allowed_below": "Temperature below which heating is allowed",
    "elec_power": "Electrical power consumption in Watts",
    "activate_service": "Service call method (press, call, etc.)",
    "activate_entity": "Home Assistant entity to activate heating"
  },
  "heating": {
    "heater_present": "Heat pump present (True/False)",
    "entity_hp_enabled": "Binary sensor indicating if heating is enabled",
    "degree_days_factor": "Degree days factor for heating calculation",
    "adjustment": "Adjustment method (on/off, power, heating curve)",
    "stages": "Power and COP pairs for different heating stages",
    "max_power": "Maximum power for this stage (W)",
    "cop": "Coefficient of Performance at this stage",
    "entity_adjust_heating_curve": "Home Assistant entity to adjust heating curve",
    "adjustment_factor": "Factor for heating curve adjustment"
  }
}
