{
  "solar": {
    "name": "Solar panel name (e.g., garage, roof)",
    "entity_pv_switch": "Home Assistant entity for enabling/disabling solar panel",
    "tilt": "Tilt angle of solar panels in degrees (0=horizontal, 90=vertical)",
    "orientation": "Orientation in degrees (0=North, 90=East, 180=South, 270=West)",
    "capacity": "Total capacity of solar panels in kWp",
    "yield": "Expected yield factor (historical production data)",
    "strings": "Multiple string configurations for complex solar setups"
  },
  "battery": {
    "name": "Battery name for identification in reports and logs",
    "entity_level": "Home Assistant entity (sensor) showing current battery state of charge in **%**",
    "capacity": "Total battery capacity in **kWh**",
    "upper_limit": "Maximum allowed charge level in **%**.\n\nThis is the upper limit for charging. Set below 100% if you want to preserve battery health.",
    "lower_limit": "Minimum allowed discharge level in **%** (temporary limit).\n\nThe battery will not be discharged below this level during optimization.",
    "optimal_lower": "Optimal minimum level for battery health in **%**.\n\nThis is the recommended long-term minimum level to preserve battery lifespan.",
    "entity_min_soc": "Home Assistant entity (input_number) for minimum SOC at optimization end.\n\n**Default: 0%**\nUseful when you expect **cheap electricity or high PV production** in the following days - start with an empty battery to maximize charging opportunities.",
    "entity_max_soc": "Home Assistant entity (input_number) for maximum SOC at optimization end.\n\n**Default: 100%**\nUseful when you expect **expensive electricity or low PV production** in the following days - ensure the battery is full at the end of optimization.",
    "charge_stages": "Power and efficiency pairs for different charging rates.\n\nDefine multiple stages with:\n• **power**: Maximum power in **W** for this stage\n• **efficiency**: Charging efficiency as a factor (e.g., 0.95 = 95%)\n\nExample: AC to DC inverter efficiency at different power levels.",
    "discharge_stages": "Power and efficiency pairs for different discharging rates.\n\nDefine multiple stages with:\n• **power**: Maximum power in **W** for this stage  \n• **efficiency**: Discharging efficiency as a factor (e.g., 0.95 = 95%)\n\nExample: DC to AC inverter efficiency at different power levels.",
    "reduced_hours": "Power limitations for specific hours.\n\nDefine hours (0-23) with reduced maximum power in **W**.\n\n**Example use:** Limit inverter power during night hours to reduce noise.\n\nFormat: {\"hour\": max_power_in_watts}",
    "minimum_power": "Minimum power threshold for battery operation in **W**.\n\nThe battery will not charge or discharge below this power level to avoid inefficient operation.",
    "dc_to_bat_efficiency": "Efficiency of charging the battery from DC bus.\n\nSpecify as a factor (e.g., 0.95 = 95% efficiency).\n\nThis is the battery's own charging efficiency, separate from inverter efficiency.",
    "dc_to_bat_power": "Maximum DC to battery power in **W** (optional).\n\nLimits the maximum power that can flow from the DC bus to the battery. Relevant for hybrid inverters with both AC and PV inputs.\n\n**Default:** 2× AC charging power if not specified.",
    "bat_to_dc_efficiency": "Efficiency of discharging the battery to DC bus.\n\nSpecify as a factor (e.g., 0.95 = 95% efficiency).\n\nThis is the battery's own discharging efficiency, separate from inverter efficiency.",
    "bat_to_dc_power": "Maximum battery to DC power in **W** (optional).\n\nLimits the maximum power that can flow from the battery to the DC bus. Relevant for hybrid inverters.\n\n**Default:** 2× AC discharging power if not specified.",
    "cycle_cost": "Cost per battery cycle for degradation calculation in **€/kWh**.\n\n**Important:** This is counted for **half-cycles** (both charging AND discharging).\n\n**Example:** If your full cycle cost is €0.12/kWh, enter **0.06** (half-cycle cost).",
    "entity_power_feedin": "Home Assistant entity to control grid feed-in power.\n\nUsed to set the charging/discharging power of the battery system.",
    "entity_operating_mode": "Home Assistant entity to set battery operating mode.\n\nCreate an input_select with options like \"Aan\" (On) and \"Uit\" (Off) to control the battery system.",
    "entity_stop_inverter": "Home Assistant entity (input_datetime) to stop inverter at specific time.\n\nDAO will write the calculated stop time to this entity.",
    "entity_balance_switch": "Home Assistant entity to enable/disable grid balancing.\n\nWhen enabled, the system balances power to minimize grid import/export (\"zero on the meter\" mode), overriding the feed-in power setting.\n\n**Useful when:** Feed-in and consumption tariffs differ (e.g., no net metering).",
    "entity_from_battery": "Home Assistant entity tracking power from battery",
    "entity_from_pv": "Home Assistant entity tracking power from PV",
    "entity_from_ac": "Home Assistant entity tracking power from AC",
    "entity_calculated_soc": "Home Assistant entity for calculated state of charge",
    "solar": "DC-connected solar panels directly to battery.\n\nDefine solar arrays connected to the DC bus of a hybrid inverter."
  },
  "ev": {
    "name": "Electric vehicle name/model",
    "capacity": "Battery capacity in kWh",
    "entity_position": "Device tracker entity for vehicle location",
    "entity_max_amperage": "Home Assistant entity showing maximum charging amperage",
    "charge_three_phase": "Three-phase charging capability (True/False)",
    "charge_stages": "Amperage and efficiency pairs for charging levels",
    "entity_actual_level": "Home Assistant entity showing current battery level (%)",
    "entity_plugged_in": "Binary sensor indicating if vehicle is plugged in",
    "charge_switch": "Switch to enable/disable charging",
    "entity_set_charging_ampere": "Home Assistant entity to set charging current",
    "entity_stop_charging": "Home Assistant entity to stop charging at specific time",
    "scheduler_entity_set_level": "Home Assistant entity to set desired charge level for scheduler",
    "scheduler_level_margin": "Margin around target level for scheduler (%)",
    "scheduler_entity_ready_datetime": "Home Assistant entity for when vehicle should be ready"
  },
  "machine": {
    "name": "Machine name (washing machine, dishwasher, etc.)",
    "programs": "Different programs with power consumption patterns",
    "program_name": "Program name (e.g., eco, normal, intensive)",
    "program_power": "Power consumption pattern in Watts per interval",
    "entity_start_window": "Home Assistant entity for earliest start time",
    "entity_end_window": "Home Assistant entity for latest end time",
    "entity_selected_program": "Input select entity for program selection",
    "entity_calculated_start": "Home Assistant entity showing calculated optimal start time",
    "entity_calculated_end": "Home Assistant entity showing calculated end time"
  },
  "prices": {
    "source": "Source for day-ahead prices (nordpool, entsoe, epex)",
    "entsoe_key": "ENTSO-E API key for fetching electricity prices",
    "regular_high": "High tariff rate in €/kWh",
    "regular_low": "Low tariff rate in €/kWh",
    "switch_to_low": "Hour when switching to low tariff (0-23)",
    "energy_taxes_consumption": "Date-based energy taxes for consumption",
    "energy_taxes_production": "Date-based energy taxes for production",
    "cost_supplier_consumption": "Date-based supplier costs for consumption",
    "cost_supplier_production": "Date-based supplier costs for production",
    "vat_consumption": "Date-based VAT rates for consumption (%)",
    "vat_production": "Date-based VAT rates for production (%)",
    "last_invoice": "Date of last electricity invoice",
    "tax_refund": "Enable tax refund calculation (True/False)"
  },
  "reports": {
    "grid_consumption": "Home Assistant sensors tracking grid consumption in kWh",
    "grid_production": "Home Assistant sensors tracking grid production/export in kWh",
    "solar_ac": "Home Assistant sensors for AC solar production in kWh",
    "solar_dc": "Home Assistant sensors for DC solar production in kWh",
    "ev_consumption": "Home Assistant sensors for electric vehicle consumption in kWh",
    "wp_consumption": "Home Assistant sensors for heat pump (warmtepomp) consumption in kWh",
    "boiler_consumption": "Home Assistant sensors for boiler/water heater consumption in kWh",
    "machine_consumption": "Home Assistant sensors for machine (washing machine, dishwasher, etc.) consumption in kWh",
    "battery_consumption": "Home Assistant sensors for battery charging consumption in kWh",
    "battery_production": "Home Assistant sensors for battery discharge production in kWh",
    "co2_intensity": "Home Assistant sensors for CO2 intensity data (gCO2/kWh)"
  },
  "general": {
    "strategy": "The **strategy** setting in the Day Ahead Optimizer determines what the optimizer tries to achieve when calculating how to use your home energy resources (like batteries, solar, or flexible loads).\n\n**This is a flex setting** - you can either:\n• Select a **direct value** from the dropdown\n• Reference a **Home Assistant entity** that holds the strategy value\n\nYou can choose between two modes:\n\n**1. `minimize cost` (default)**\n→ The optimizer schedules charging, discharging, and energy use so that your total electricity cost is as low as possible. It buys power when prices are low and sells or avoids buying when prices are high.\n_Goal: save the most money._\n\n**2. `minimize consumption`**\n→ The optimizer tries to minimize the amount of energy drawn from the grid, even if that doesn't always yield the lowest cost. It aims for near \"zero on the meter\" by maximizing self-consumption of solar energy and using stored energy efficiently.\n_Goal: reduce dependency on the grid and external energy use._\n\n**In short:**\n• **\"Minimize cost\"** = focuses on financial optimization.\n• **\"Minimize consumption\"** = focuses on energy self-sufficiency.\n\n**Using a Home Assistant entity:**\nCreate an `input_select` in Home Assistant with options `minimize cost` and `minimize consumption`, then reference it here (e.g., `input_select.dao_strategy`). This allows you to change the strategy dynamically through automations - for example, automatically switching to cost-minimizing mode when energy prices spike, or to consumption-minimizing mode during high solar production periods.",
    "grid_max_power": "Maximum available grid power connection in **kW**. This is the maximum power that can be drawn from or fed to the grid at any given time.",
    "interval": "Calculation interval for optimization.\n\n**Choose between:**\n• `1hour` (default) - Hourly intervals for optimization calculations\n• `15min` - 15-minute intervals, use this if your energy supplier charges based on quarter-hour prices\n\nThe interval affects how granular the optimization will be.",
    "max_gap": "**Maximum optimization gap** - The optimization calculation stops when the difference between two iterations is smaller than this value.\n\n**This is a flex setting** - you can either:\n• Enter a **direct numeric value** (default: `0.005`, which is half a euro cent)\n• Reference a **Home Assistant entity** that provides the value (e.g., `input_number.dao_max_gap`)\n\n**Value range:** `0.00001` to `1.0`\n\nIf calculations take too long, you can increase this value up to `1.0` to get faster (but less precise) results. Lower values give more precise optimization but take longer to compute.\n\n**Using a Home Assistant entity:**\nCreate an `input_number` in Home Assistant (range: `0.00001` to `1.0`) to dynamically adjust the optimization precision based on your needs.",
    "source_day_ahead": "Source for fetching day-ahead electricity prices.\n\n**Available sources:**\n• `nordpool` - Nord Pool day-ahead market prices\n• `entsoe` - ENTSO-E Transparency Platform (requires API key)\n• `easyenergy` - EasyEnergy supplier prices\n• `tibber` - Tibber real-time pricing (requires API token)",
    "entsoe_api_key": "Reference to ENTSO-E API key secret for fetching electricity prices.\n\nOnly required when using `entsoe` as the price source. Get your free API key from the ENTSO-E Transparency Platform.",
    "meteoserver_key": "Reference to Meteoserver API key secret for weather forecasting.\n\nUsed to fetch solar radiation forecasts for calculating expected PV production. You can register for a free account at **meteoserver.nl** (max 500 requests/month).",
    "tibber_api_token": "Reference to Tibber API token secret for real-time pricing.\n\nOnly required when using `tibber` as the price source.",
    "use_calc_baseload": "Automatically calculate baseload from historical consumption data.\n\n**Set to True:** DAO will automatically calculate your baseload based on historical data from Home Assistant\n**Set to False:** You manually specify the 24-hour baseload pattern\n\nAutomatic calculation requires at least 6 weeks of historical data and proper report sensor configuration.",
    "baseload_calc_periode": "Number of days of historical data to use for baseload calculation.\n\n**Default: 56 days** (8 weeks)\n\nOnly used when `use_calc_baseload` is set to True. More days provide better averaging but require longer initial data collection.",
    "baseload": "Manual 24-hour baseload consumption pattern in **kW per hour**.\n\nProvide 24 values (one for each hour starting at 00:00) representing your average base consumption from appliances not controlled by the optimizer (lights, refrigerator, servers, etc.).\n\nOnly used when `use_calc_baseload` is set to False."
  },
  "database": {
    "engine": "Database engine type (sqlite, mysql, postgresql)",
    "ha_host": "Home Assistant host address or IP",
    "ha_port": "Home Assistant port number (default: 8123)",
    "ha_protocol": "API protocol for Home Assistant connection (http or https)",
    "ha_token": "Reference to Home Assistant long-lived access token secret",
    "database_name": "Database filename (for SQLite)",
    "db_path": "Path to database directory (for SQLite)",
    "db_host": "Database server host address or IP",
    "db_port": "Database server port number",
    "db_database": "Name of the database to connect to",
    "db_username": "Username for database authentication",
    "db_password": "Reference to database password secret"
  },
  "dashboard": {
    "port": "Port number for web dashboard server.\n\n**Default: 5000**\n\n**Note for macOS users:** Port 5000 is often used by AirPlay Receiver. Consider using port 5001 or disable AirPlay Receiver in System Settings.",
    "logging_level": "Application logging verbosity level.\n\n**Available levels:**\n• **debug** - Very detailed output, use when troubleshooting\n• **info** (default) - General information and warnings\n• **warning** - Only warnings and errors\n• **error** - Only error messages\n\n**Note:** Higher levels (e.g., info) also include lower level messages (warning, error).",
    "history_save_days": "Number of days to retain historical optimization data.\n\n**Default: 7 days**\n\nOlder graphs and log files will be automatically deleted.",
    "graphical_backend": "Matplotlib backend for graphics generation.\n\n**Leave empty for auto-detect** (recommended).\n\n**Manual options:**\n• **Agg** - Works well on headless Linux (Raspberry Pi)\n• **Gtk3Agg** - Works well on Ubuntu with desktop\n• MacOSX, QtAgg, TkAgg, WxAgg - Other platform options\n\nOnly change if auto-detection fails.",
    "graphics_show": "Enable or disable graphics generation for reports.\n\n**Set to False** (default) for headless systems.\n**Set to True** to display graphs directly after calculation (requires display).",
    "graphics_style": "Matplotlib style theme for generated graphics.\n\n**Available styles:**\n• **default** - White background (default)\n• **dark_background** - Dark theme\n• **bmh** - Bayesian Methods for Hackers style\n• **fivethirtyeight** - FiveThirtyEight style\n• **ggplot** - ggplot2 style\n• **Solarize_Light2** - Sun-lit appearance\n\nMore info: matplotlib.org/stable/gallery/style_sheets/",
    "graphics_average_consumption": "Display average consumption line on graphs.\n\n**True/False** - Show or hide the average consumption reference line in consumption graphs.",
    "graphics_battery_balance": "Display battery state of charge balance graph.\n\n**True/False** (default: True) - Generate a separate graph showing battery energy balance over time.",
    "graphics_prices_consumption": "Display consumption electricity prices on graphs.\n\n**True/False** (default: True) - Show the prices you pay for consuming electricity (including taxes and supplier costs).",
    "graphics_prices_production": "Display production/feed-in electricity prices on graphs.\n\n**True/False** (default: False) - Show the prices you receive for feeding electricity back to the grid (excluding taxes).",
    "graphics_prices_spot": "Display spot market electricity prices on graphs.\n\n**True/False** (default: True) - Show the raw day-ahead market prices without additional costs or taxes.",
    "notifications_opstarten": "Send Home Assistant notification when application starts.\n\n**True/False** - Get notified when DAO starts up.",
    "notifications_berekening": "Send Home Assistant notification after optimization calculation completes.\n\n**True/False** - Get notified when each optimization calculation finishes.",
    "notification_entity": "Home Assistant notification service entity.\n\n**Example:** notify.mobile_app_iphone\n\nUsed for sending notifications when enabled above.",
    "last_activity_entity": "Home Assistant entity to update with last activity timestamp.\n\nProvide an input_datetime entity that DAO will update with the timestamp of the last activity."
  },
  "boiler": {
    "boiler_present": "Boiler/water heater present (True/False)",
    "entity_actual_temp": "Sensor for current water temperature",
    "boiler_setpoint": "**Target temperature for water heater in °C**\n\n**This is a flex setting** - you can either:\n• Enter a **direct numeric value** (e.g., 55 for 55°C)\n• Reference a **Home Assistant entity** (e.g., `input_number.boiler_setpoint`)\n\nUsing a Home Assistant entity allows you to:\n• Temporarily increase the setpoint for legionella prevention (e.g., raise to 70°C every two weeks)\n• Adjust based on season or energy prices\n• Control via automations\n\n**Example automation for legionella prevention:**\nCreate an automation that raises the setpoint to 70°C every 14 days, then returns it to the normal value after a few hours.",
    "boiler_hysterese": "**Temperature hysteresis for heating control in °C**\n\n**This is a flex setting** - you can either:\n• Enter a **direct numeric value** (e.g., 5 for 5°C hysteresis)\n• Reference a **Home Assistant entity** (e.g., `input_number.boiler_hysteresis`)\n\nHysteresis prevents the heater from switching on/off too frequently. The heater starts when temperature drops below (setpoint - hysteresis) and stops when it reaches the setpoint.\n\n**Example:** With setpoint 55°C and hysteresis 5°C:\n• Heating starts at 50°C\n• Heating stops at 55°C",
    "cop": "Coefficient of Performance",
    "cooling_rate": "Cooling rate in °C per hour",
    "volume": "Water volume in liters",
    "heating_allowed_below": "Temperature below which heating is allowed",
    "elec_power": "Electrical power consumption in Watts",
    "activate_service": "Service call method (press, call, etc.)",
    "activate_entity": "Home Assistant entity to activate heating"
  },
  "heating": {
    "heater_present": "Heat pump present (True/False)",
    "entity_hp_enabled": "Binary sensor indicating if heating is enabled",
    "degree_days_factor": "**Thermal energy requirement per degree-day in kWh/K.day**\n\n**This is a flex setting** - you can either:\n• Enter a **direct numeric value** (e.g., 2.5 for 2.5 kWh per degree-day)\n• Reference a **Home Assistant entity** (e.g., `input_number.degree_days_factor` or `sensor.calculated_dd_factor`)\n\nThis value represents how many thermal kWh are needed per degree-day, using 16°C as the reference temperature.\n\n**What is a degree-day?**\nA degree-day measures heating demand. If the average outdoor temperature is 10°C, that's 6 degree-days (16°C - 10°C = 6).\n\n**Example calculation:**\nIf degree_days_factor = 2.5 kWh/K.day and it's 6 degree-days, then heating requirement = 2.5 × 6 = 15 kWh.\n\n**Using a Home Assistant entity:**\nYou can calculate this value dynamically based on actual consumption and weather data, allowing the system to adapt to changing insulation efficiency or user behavior.",
    "adjustment": "Adjustment method (on/off, power, heating curve)",
    "stages": "Power and COP pairs for different heating stages",
    "max_power": "Maximum power for this stage (W)",
    "cop": "Coefficient of Performance at this stage",
    "entity_adjust_heating_curve": "Home Assistant entity to adjust heating curve",
    "adjustment_factor": "Factor for heating curve adjustment"
  }
}
